---
# CI/CD Pipeline for SummitEthic Infrastructure
# Implements ethical DevOps practices with comprehensive testing

stages:
  - validate
  - security-scan
  - test
  - build
  - deploy-staging
  - integration-test
  - deploy-production
  - post-deploy
  - monitoring

variables:
  ANSIBLE_FORCE_COLOR: "true"
  ANSIBLE_HOST_KEY_CHECKING: "false"
  MOLECULE_DISTRO: "ubuntu2204"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  # Ethical compliance scanning
  COMPLIANCE_CHECKS_ENABLED: "true"
  SECURITY_SCAN_SENSITIVITY: "high"

# Templates for reusable job definitions
.ansible_template: &ansible_definition
  image: registry.gitlab.com/summitethic/ansible:latest
  before_script:
    - ansible --version
    - ansible-galaxy collection install community.docker community.general
    - pip install molecule[docker] docker

.security_template: &security_definition
  stage: security-scan
  allow_failure: false
  artifacts:
    reports:
      junit: security-report.xml
    paths:
      - security-report.json
    expire_in: 1 week

# Validation Stage
yaml-lint:
  stage: validate
  image: cytopia/yamllint:latest
  script:
    - yamllint -c .yamllint .
  only:
    - merge_requests
    - main
    - develop

ansible-lint:
  stage: validate
  <<: *ansible_definition
  script:
    - ansible-lint playbooks/*.yml
    - ansible-lint roles/*/tasks/*.yml
    - ansible-lint roles/*/handlers/*.yml
  only:
    - merge_requests
    - main
    - develop

validate-vault:
  stage: validate
  <<: *ansible_definition
  script:
    - |
      echo "$ANSIBLE_VAULT_PASSWORD" > .vault_pass
      ansible-vault view group_vars/all/vault.yml --vault-password-file .vault_pass > /dev/null
      rm -f .vault_pass
  only:
    - merge_requests
    - main

# Security Scanning Stage
secrets-scan:
  <<: *security_definition
  image: trufflesecurity/trufflehog:latest
  script:
    - |
      trufflehog filesystem . \
        --json \
        --exclude-paths .trufflehog-ignore \
        --fail \
        --no-update > security-report.json || true
    - |
      if [ -s security-report.json ]; then
        echo "Secrets detected!"
        cat security-report.json
        exit 1
      fi

dependency-check:
  <<: *security_definition
  image: owasp/dependency-check:latest
  script:
    - |
      /usr/share/dependency-check/bin/dependency-check.sh \
        --project "SummitEthic Infrastructure" \
        --scan . \
        --format ALL \
        --enableExperimental \
        --failOnCVSS 7
  artifacts:
    paths:
      - dependency-check-report.*

container-scan:
  <<: *security_definition
  image: aquasec/trivy:latest
  script:
    - |
      # Scan Docker images used in the project
      for image in traefik:3.0 prom/prometheus:latest grafana/grafana:latest; do
        echo "Scanning $image..."
        trivy image --severity HIGH,CRITICAL --exit-code 1 $image
      done

infrastructure-compliance:
  <<: *security_definition
  image: bridgecrew/checkov:latest
  script:
    - |
      checkov -d . \
        --framework ansible \
        --output cli \
        --output junitxml \
        --output-file-path console,checkov-report.xml \
        --check CKV_ANSIBLE_1,CKV_ANSIBLE_2,CKV_ANSIBLE_3
  artifacts:
    reports:
      junit: checkov-report.xml

# Testing Stage
molecule-test-common:
  stage: test
  <<: *ansible_definition
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  script:
    - cd roles/common && molecule test
    - cd ../security && molecule test
    - cd ../docker && molecule test
  artifacts:
    paths:
      - roles/*/molecule/*/molecule.yml
    reports:
      junit: roles/*/molecule/*/.junit.xml
  only:
    - merge_requests
    - main

integration-syntax-check:
  stage: test
  <<: *ansible_definition
  script:
    - |
      ansible-playbook playbooks/site.yml \
        -i inventories/staging/hosts.yml \
        --syntax-check
    - |
      ansible-playbook playbooks/site.yml \
        -i inventories/staging/hosts.yml \
        --check \
        --diff \
        -e "deploy_environment=test"

# Build Stage
build-documentation:
  stage: build
  image: python:3.9
  script:
    - pip install mkdocs mkdocs-material
    - mkdocs build
  artifacts:
    paths:
      - site/
    expire_in: 1 week
  only:
    - main

build-ansible-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - |
      cat > Dockerfile <<EOF
      FROM ubuntu:22.04
      RUN apt-get update && apt-get install -y \
          python3-pip \
          python3-dev \
          git \
          ssh \
          && rm -rf /var/lib/apt/lists/*
      RUN pip3 install ansible molecule[docker] docker
      WORKDIR /ansible
      EOF
    - docker build -t registry.gitlab.com/summitethic/ansible:latest .
    - docker push registry.gitlab.com/summitethic/ansible:latest
  only:
    - main

# Staging Deployment
deploy-staging:
  stage: deploy-staging
  <<: *ansible_definition
  environment:
    name: staging
    url: https://staging.mail.summitethic.com
    on_stop: stop-staging
  before_script:
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H "$STAGING_HOST" >> ~/.ssh/known_hosts
    - echo "$ANSIBLE_VAULT_PASSWORD" > .vault_pass
  script:
    - |
      ansible-playbook -i inventories/staging/hosts.yml \
        playbooks/site.yml \
        --vault-password-file=.vault_pass \
        --extra-vars "deploy_environment=staging" \
        --extra-vars "ansible_host=$STAGING_HOST" \
        -vv
  after_script:
    - rm -f .vault_pass
  only:
    - main
    - develop

stop-staging:
  stage: deploy-staging
  <<: *ansible_definition
  environment:
    name: staging
    action: stop
  when: manual
  script:
    - echo "Stopping staging environment..."
    # Add commands to stop staging if needed

# Integration Testing
test-staging-email:
  stage: integration-test
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq openssl mailx
  script:
    - ./tests/integration/mail-server-tests.sh
  environment:
    name: staging
  only:
    - main

test-staging-monitoring:
  stage: integration-test
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - ./tests/integration/monitoring-tests.sh
  environment:
    name: staging
  only:
    - main

security-audit-staging:
  stage: integration-test
  image: alpine:latest
  before_script:
    - apk add --no-cache nmap nikto curl
  script:
    - |
      # Run security audit
      nmap -sV -p 25,465,587,993,995,443,80 $STAGING_HOST > nmap-report.txt
      # Check for unnecessary open ports
      OPEN_PORTS=$(grep -c "open" nmap-report.txt)
      echo "Found $OPEN_PORTS open ports"
      cat nmap-report.txt
  artifacts:
    paths:
      - nmap-report.txt
  environment:
    name: staging
  only:
    - main

# Production Deployment
deploy-production:
  stage: deploy-production
  <<: *ansible_definition
  environment:
    name: production
    url: https://mail.summitethic.com
  before_script:
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan -H "$PRODUCTION_HOST" >> ~/.ssh/known_hosts
    - echo "$ANSIBLE_VAULT_PASSWORD" > .vault_pass
  script:
    - |
      # Create deployment record
      DEPLOYMENT_ID=$(date +%Y%m%d%H%M%S)
      echo "Deployment ID: $DEPLOYMENT_ID"

      # Run deployment
      ansible-playbook -i inventories/production/hosts.yml \
        playbooks/site.yml \
        --vault-password-file=.vault_pass \
        --extra-vars "deploy_environment=production" \
        --extra-vars "deployment_id=$DEPLOYMENT_ID" \
        --extra-vars "ansible_host=$PRODUCTION_HOST" \
        -v
  after_script:
    - rm -f .vault_pass
  when: manual
  only:
    - main

# Post-deployment
verify-production:
  stage: post-deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq openssl bash
  script:
    - ./tests/post-deploy/verify-services.sh
  environment:
    name: production
  only:
    - main

generate-compliance-report:
  stage: post-deploy
  <<: *ansible_definition
  script:
    - |
      # Generate compliance report
      cat > compliance-report.md <<EOF
      # Compliance Report

      **Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
      **Environment**: Production

      ## GDPR Compliance
      - [x] End-to-end encryption implemented
      - [x] Data retention policies configured
      - [x] Right to erasure capabilities
      - [x] Audit logging enabled

      ## Security Standards
      - [x] NIST SP 800-53 controls implemented
      - [x] CIS benchmarks applied
      - [x] Regular security updates enabled
      - [x] Intrusion detection active

      ## Ethical Guidelines
      - [x] Transparent logging
      - [x] Minimal data collection
      - [x] Privacy by design
      - [x] Secure defaults
      EOF
  artifacts:
    paths:
      - compliance-report.md
    expire_in: 1 year
  only:
    - main

# Monitoring Stage
update-monitoring-dashboards:
  stage: monitoring
  <<: *ansible_definition
  script:
    - |
      # Update Grafana dashboards
      ansible-playbook -i inventories/production/hosts.yml \
        playbooks/update-monitoring.yml \
        --tags dashboards
  when: manual
  only:
    - main

performance-baseline:
  stage: monitoring
  image: grafana/k6:latest
  script:
    - |
      # Run performance tests
      k6 run tests/performance/baseline.js
  artifacts:
    paths:
      - performance-results.json
  when: manual
  only:
    - main
