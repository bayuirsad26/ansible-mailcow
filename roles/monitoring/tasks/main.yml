---
# Grafana stack deployment for comprehensive monitoring
# Ethical observability implementation

- name: Create monitoring directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop:
    - /opt/monitoring
    - /opt/monitoring/prometheus
    - /opt/monitoring/grafana
    - /opt/monitoring/loki
    - /opt/monitoring/alertmanager
    - /opt/monitoring/data
    - /opt/monitoring/data/prometheus
    - /opt/monitoring/data/grafana
    - /opt/monitoring/data/loki
  tags: [monitoring, directories]

- name: Create Prometheus configuration
  template:
    src: prometheus.yml.j2
    dest: /opt/monitoring/prometheus/prometheus.yml
    owner: root
    group: root
    mode: "0644"
  notify: restart prometheus
  tags: [monitoring, prometheus]

- name: Create Prometheus alerting rules
  template:
    src: alerts.yml.j2
    dest: /opt/monitoring/prometheus/alerts.yml
    owner: root
    group: root
    mode: "0644"
  notify: restart prometheus
  tags: [monitoring, prometheus, alerts]

- name: Create Grafana configuration
  template:
    src: grafana.ini.j2
    dest: /opt/monitoring/grafana/grafana.ini
    owner: root
    group: root
    mode: "0644"
  notify: restart grafana
  tags: [monitoring, grafana]

- name: Create Loki configuration
  template:
    src: loki-config.yml.j2
    dest: /opt/monitoring/loki/loki-config.yml
    owner: root
    group: root
    mode: "0644"
  notify: restart loki
  tags: [monitoring, loki]

- name: Create AlertManager configuration
  template:
    src: alertmanager.yml.j2
    dest: /opt/monitoring/alertmanager/alertmanager.yml
    owner: root
    group: root
    mode: "0644"
  notify: restart alertmanager
  tags: [monitoring, alertmanager]

- name: Create monitoring docker-compose file
  template:
    src: monitoring-compose.yml.j2
    dest: /opt/monitoring/docker-compose.yml
    owner: root
    group: root
    mode: "0644"
  tags: [monitoring, compose]

- name: Start monitoring stack
  docker_compose:
    project_src: /opt/monitoring
    state: present
  tags: [monitoring, service]

- name: Wait for Grafana to be healthy
  uri:
    url: "http://localhost:3000/api/health"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 5
  tags: [monitoring, health]

- name: Configure Grafana datasources
  uri:
    url: "http://localhost:3000/api/datasources"
    method: POST
    user: admin
    password: "{{ monitoring_grafana_config.security.admin_password }}"
    force_basic_auth: true
    body_format: json
    body: "{{ item }}"
    status_code: [200, 409] # 409 if already exists
  loop:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: proxy
      isDefault: true
    - name: Loki
      type: loki
      url: http://loki:3100
      access: proxy
  tags: [monitoring, grafana, datasources]

- name: Import Grafana dashboards
  uri:
    url: "http://localhost:3000/api/dashboards/import"
    method: POST
    user: admin
    password: "{{ monitoring_grafana_config.security.admin_password }}"
    force_basic_auth: true
    body_format: json
    body:
      dashboard:
        id: "{{ item.id }}"
        title: "{{ item.title }}"
      overwrite: true
      inputs:
        - name: DS_PROMETHEUS
          type: datasource
          pluginId: prometheus
          value: Prometheus
  loop:
    - { id: 1860, title: "Node Exporter Full" }
    - { id: 193, title: "Docker Monitoring" }
    - { id: 10990, title: "Postfix Mail" }
  tags: [monitoring, grafana, dashboards]
