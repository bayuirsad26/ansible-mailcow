---
# Docker installation with security best practices
# Following Docker CIS benchmark recommendations

- name: Check if Docker is already installed
  ansible.builtin.command: docker --version
  register: docker_check
  changed_when: false
  failed_when: false
  tags: [docker, check]

- name: Remove old Docker packages
  ansible.builtin.apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
    purge: true
  when: docker_check.rc != 0
  tags: [docker, cleanup]

- name: Create Docker keyring directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: [docker, repository]

- name: Add Docker GPG key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    owner: root
    group: root
    mode: '0644'
  tags: [docker, repository]

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
    update_cache: true
  tags: [docker, repository]

- name: Install Docker packages
  ansible.builtin.apt:
    name:
      - "docker-{{ docker_edition }}={{ docker_version }}"
      - "docker-{{ docker_edition }}-cli={{ docker_version }}"
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: true
  notify: restart docker
  tags: [docker, packages]

- name: Create Docker configuration directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /etc/docker
    - /etc/docker/certs.d
    - /etc/docker/plugins
  tags: [docker, config]

- name: Configure Docker daemon
  ansible.builtin.template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
    backup: true
  notify: restart docker
  tags: [docker, config]

- name: Create Docker service override directory
  ansible.builtin.file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: [docker, systemd]

- name: Configure Docker service overrides
  ansible.builtin.template:
    src: docker-override.conf.j2
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd
    - restart docker
  tags: [docker, systemd]

- name: Configure Docker log rotation
  ansible.builtin.template:
    src: docker-logrotate.j2
    dest: /etc/logrotate.d/docker-containers
    owner: root
    group: root
    mode: '0644'
  tags: [docker, logging]

- name: Create Docker security configuration
  ansible.builtin.template:
    src: docker-seccomp.json.j2
    dest: /etc/docker/seccomp.json
    owner: root
    group: root
    mode: '0644'
  notify: restart docker
  tags: [docker, security]

- name: Configure user namespace remapping
  when: docker_userns_remap != ""
  block:
    - name: Create subuid entry
      ansible.builtin.lineinfile:
        path: /etc/subuid
        line: "dockremap:100000:65536"
        create: true
        owner: root
        group: root
        mode: '0644'
        
    - name: Create subgid entry
      ansible.builtin.lineinfile:
        path: /etc/subgid
        line: "dockremap:100000:65536"
        create: true
        owner: root
        group: root
        mode: '0644'
  tags: [docker, security]

- name: Start and enable Docker service
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: started
    daemon_reload: true
  tags: [docker, service]

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true
  when: ansible_user != 'root'
  tags: [docker, users]

- name: Create Docker networks
  community.docker.docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    driver_options: "{{ item.options | default({}) }}"
    internal: "{{ item.internal | default(false) }}"
  loop:
    - name: "{{ traefik_network_name }}"
      options:
        com.docker.network.bridge.name: "br-proxy"
    - name: mailcow-network
      options:
        com.docker.network.bridge.name: "br-mailcow"
      internal: true
    - name: monitoring
      options:
        com.docker.network.bridge.name: "br-monitor"
      internal: true
  tags: [docker, networks]

- name: Prune Docker system
  community.docker.docker_prune:
    containers: true
    images: true
    networks: true
    volumes: false
    builder_cache: true
  tags: [docker, cleanup]
